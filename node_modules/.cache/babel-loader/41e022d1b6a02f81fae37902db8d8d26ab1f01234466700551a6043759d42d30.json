{"ast":null,"code":"let FractionJs = require('fraction.js');\nlet Prefixer = require('./prefixer');\nlet utils = require('./utils');\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi;\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i;\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio';\n    } else {\n      return prefix + name + '-device-pixel-ratio';\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value);\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96);\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96);\n    }\n    value = value.simplify();\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d;\n    }\n    return this.prefixName(prefix, name) + colon + value;\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = [];\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'));\n        this.bad.push(this.prefixName(prefix, 'max'));\n      }\n    }\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)));\n    });\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule);\n    let prefixes = parent ? [parent] : this.prefixes;\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n          prefixed.push(query);\n          continue;\n        }\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT);\n            return this.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n          });\n          prefixed.push(processed);\n        }\n        prefixed.push(query);\n      }\n      return utils.uniq(prefixed);\n    });\n  }\n}\nmodule.exports = Resolution;","map":{"version":3,"names":["FractionJs","require","Prefixer","utils","REGEXP","SPLIT","Resolution","prefixName","prefix","name","prefixQuery","colon","value","units","div","mul","simplify","n","d","clean","rule","bad","prefixes","push","params","editList","queries","filter","query","every","i","includes","process","parent","parentPrefix","origin","prefixed","processed","replace","str","parts","match","uniq","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/autoprefixer/lib/resolution.js"],"sourcesContent":["let FractionJs = require('fraction.js')\n\nlet Prefixer = require('./prefixer')\nlet utils = require('./utils')\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio'\n    } else {\n      return prefix + name + '-device-pixel-ratio'\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value)\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96)\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96)\n    }\n    value = value.simplify()\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d\n    }\n    return this.prefixName(prefix, name) + colon + value\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = []\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'))\n        this.bad.push(this.prefixName(prefix, 'max'))\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)))\n    })\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule)\n    let prefixes = parent ? [parent] : this.prefixes\n\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (\n          !query.includes('min-resolution') &&\n          !query.includes('max-resolution')\n        ) {\n          prefixed.push(query)\n          continue\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT)\n            return this.prefixQuery(\n              prefix,\n              parts[1],\n              parts[2],\n              parts[3],\n              parts[4]\n            )\n          })\n          prefixed.push(processed)\n        }\n        prefixed.push(query)\n      }\n\n      return utils.uniq(prefixed)\n    })\n  }\n}\n\nmodule.exports = Resolution\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}