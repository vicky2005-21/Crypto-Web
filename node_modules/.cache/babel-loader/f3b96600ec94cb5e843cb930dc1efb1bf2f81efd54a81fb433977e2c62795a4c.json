{"ast":null,"code":"let Prefixer = require('./prefixer');\nlet Browsers = require('./browsers');\nlet utils = require('./utils');\nclass Declaration extends Prefixer {\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check( /* decl */\n  ) {\n    return true;\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop;\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop;\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue;\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix);\n    return decl;\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').includes('\\n');\n    }\n    return decl._autoprefixerCascade;\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax;\n    }\n    let max = 0;\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix);\n      if (prefix.length > max) {\n        max = prefix.length;\n      }\n    }\n    decl._autoprefixerMax = max;\n    return decl._autoprefixerMax;\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl) {\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let max = this.maxPrefixed(prefixes, decl);\n    let diff = max - utils.removeNote(prefix).length;\n    let before = decl.raw('before');\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('');\n    }\n    return before;\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n');\n    let min = lines[lines.length - 1];\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n');\n      let last = array[array.length - 1];\n      if (last.length < min.length) {\n        min = last;\n      }\n    });\n    lines[lines.length - 1] = min;\n    decl.raws.before = lines.join('\\n');\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix);\n    if (!cloned) return undefined;\n    let already = decl.parent.some(i => i.prop === cloned.prop && i.value === cloned.value);\n    if (already) {\n      return undefined;\n    }\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n    return decl.parent.insertBefore(decl, cloned);\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed);\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed);\n    }\n    return already;\n  }\n\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix);\n    if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n      return undefined;\n    }\n    return this.insert(decl, prefix, prefixes, result);\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result);\n      return;\n    }\n    let prefixes = super.process(decl, result);\n    if (!prefixes || !prefixes.length) {\n      return;\n    }\n    this.restoreBefore(decl);\n    decl.raws.before = this.calcBefore(prefixes, decl);\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)];\n  }\n}\nmodule.exports = Declaration;","map":{"version":3,"names":["Prefixer","require","Browsers","utils","Declaration","check","prefixed","prop","prefix","normalize","otherPrefixes","value","other","prefixes","includes","replace","set","decl","needCascade","_autoprefixerCascade","all","options","cascade","raw","maxPrefixed","_autoprefixerMax","max","removeNote","length","calcBefore","arguments","undefined","diff","before","Array","fill","join","restoreBefore","lines","split","min","group","up","array","last","raws","insert","cloned","clone","already","parent","some","i","insertBefore","isAlready","down","add","result","process","old","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/gta-final/node_modules/autoprefixer/lib/declaration.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Declaration extends Prefixer {\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check(/* decl */) {\n    return true\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other)\n      }\n    }\n    return false\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix)\n    return decl\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade =\n        this.all.options.cascade !== false && decl.raw('before').includes('\\n')\n    }\n    return decl._autoprefixerCascade\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax\n    }\n\n    let max = 0\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix)\n      if (prefix.length > max) {\n        max = prefix.length\n      }\n    }\n    decl._autoprefixerMax = max\n\n    return decl._autoprefixerMax\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl, prefix = '') {\n    let max = this.maxPrefixed(prefixes, decl)\n    let diff = max - utils.removeNote(prefix).length\n\n    let before = decl.raw('before')\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('')\n    }\n\n    return before\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n')\n    let min = lines[lines.length - 1]\n\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n')\n      let last = array[array.length - 1]\n      if (last.length < min.length) {\n        min = last\n      }\n    })\n\n    lines[lines.length - 1] = min\n    decl.raws.before = lines.join('\\n')\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix)\n    if (!cloned) return undefined\n\n    let already = decl.parent.some(\n      i => i.prop === cloned.prop && i.value === cloned.value\n    )\n    if (already) {\n      return undefined\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed)\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed)\n    }\n    return already\n  }\n\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix)\n    if (\n      this.isAlready(decl, prefixed) ||\n      this.otherPrefixes(decl.value, prefix)\n    ) {\n      return undefined\n    }\n    return this.insert(decl, prefix, prefixes, result)\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result)\n      return\n    }\n\n    let prefixes = super.process(decl, result)\n\n    if (!prefixes || !prefixes.length) {\n      return\n    }\n\n    this.restoreBefore(decl)\n    decl.raws.before = this.calcBefore(prefixes, decl)\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)]\n  }\n}\n\nmodule.exports = Declaration\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}