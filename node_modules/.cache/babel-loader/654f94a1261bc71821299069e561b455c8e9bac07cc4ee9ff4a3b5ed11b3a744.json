{"ast":null,"code":"let Declaration = require('../declaration');\nlet {\n  prefixTrackProp,\n  prefixTrackValue,\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap\n} = require('./grid-utils');\nlet Processor = require('../processor');\nclass GridRowsColumns extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({\n        prop,\n        prefix\n      });\n    }\n    return super.prefixed(prop, prefix);\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');\n  }\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    let {\n      parent,\n      prop,\n      value\n    } = decl;\n    let isRowProp = prop.includes('rows');\n    let isColumnProp = prop.includes('columns');\n    let hasGridTemplate = parent.some(i => i.prop === 'grid-template' || i.prop === 'grid-template-areas');\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false;\n    }\n    let processor = new Processor({\n      options: {}\n    });\n    let status = processor.gridStatus(parent, result);\n    let gap = getGridGap(decl);\n    gap = inheritGridGap(decl, gap) || gap;\n    let gapValue = isRowProp ? gap.row : gap.column;\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null;\n    }\n    let prefixValue = prefixTrackValue({\n      value,\n      gap: gapValue\n    });\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({\n        prop,\n        prefix\n      }),\n      value: prefixValue\n    });\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow');\n    let autoflowValue = 'row';\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim();\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n      if (!rowDecl && hasGridTemplate) {\n        return undefined;\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-rows property');\n        return undefined;\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns';\n      });\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-columns property');\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue);\n      }\n    }\n    return undefined;\n  }\n}\nGridRowsColumns.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];\nmodule.exports = GridRowsColumns;","map":{"version":3,"names":["Declaration","require","prefixTrackProp","prefixTrackValue","autoplaceGridItems","getGridGap","inheritGridGap","Processor","GridRowsColumns","prefixed","prop","prefix","normalize","replace","insert","decl","prefixes","result","parent","value","isRowProp","includes","isColumnProp","hasGridTemplate","some","i","processor","options","status","gridStatus","gap","gapValue","row","column","prefixValue","cloneBefore","autoflow","nodes","find","autoflowValue","disabled","trim","rowDecl","undefined","warn","columnDecl","names","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/gta-final/node_modules/autoprefixer/lib/hacks/grid-rows-columns.js"],"sourcesContent":["let Declaration = require('../declaration')\nlet {\n  prefixTrackProp,\n  prefixTrackValue,\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap\n} = require('./grid-utils')\nlet Processor = require('../processor')\n\nclass GridRowsColumns extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({ prop, prefix })\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')\n  }\n\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let { parent, prop, value } = decl\n    let isRowProp = prop.includes('rows')\n    let isColumnProp = prop.includes('columns')\n\n    let hasGridTemplate = parent.some(\n      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n    )\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false\n    }\n\n    let processor = new Processor({ options: {} })\n    let status = processor.gridStatus(parent, result)\n    let gap = getGridGap(decl)\n    gap = inheritGridGap(decl, gap) || gap\n\n    let gapValue = isRowProp ? gap.row : gap.column\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null\n    }\n\n    let prefixValue = prefixTrackValue({\n      value,\n      gap: gapValue\n    })\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({ prop, prefix }),\n      value: prefixValue\n    })\n\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow')\n    let autoflowValue = 'row'\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim()\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-rows property'\n        )\n        return undefined\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns'\n      })\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-columns property'\n        )\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue)\n      }\n    }\n\n    return undefined\n  }\n}\n\nGridRowsColumns.names = [\n  'grid-template-rows',\n  'grid-template-columns',\n  'grid-rows',\n  'grid-columns'\n]\n\nmodule.exports = GridRowsColumns\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAI;EACFC,eAAe;EACfC,gBAAgB;EAChBC,kBAAkB;EAClBC,UAAU;EACVC;AACF,CAAC,GAAGL,OAAO,CAAC,cAAc,CAAC;AAC3B,IAAIM,SAAS,GAAGN,OAAO,CAAC,cAAc,CAAC;AAEvC,MAAMO,eAAe,SAASR,WAAW,CAAC;EACxC;AACF;AACA;EACES,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACrB,IAAIA,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOT,eAAe,CAAC;QAAEQ,IAAI;QAAEC;MAAO,CAAC,CAAC;IAC1C;IACA,OAAO,KAAK,CAACF,QAAQ,CAACC,IAAI,EAAEC,MAAM,CAAC;EACrC;;EAEA;AACF;AACA;EACEC,SAASA,CAACF,IAAI,EAAE;IACd,OAAOA,IAAI,CAACG,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC;EACjE;EAEAC,MAAMA,CAACC,IAAI,EAAEJ,MAAM,EAAEK,QAAQ,EAAEC,MAAM,EAAE;IACrC,IAAIN,MAAM,KAAK,MAAM,EAAE,OAAO,KAAK,CAACG,MAAM,CAACC,IAAI,EAAEJ,MAAM,EAAEK,QAAQ,CAAC;IAElE,IAAI;MAAEE,MAAM;MAAER,IAAI;MAAES;IAAM,CAAC,GAAGJ,IAAI;IAClC,IAAIK,SAAS,GAAGV,IAAI,CAACW,QAAQ,CAAC,MAAM,CAAC;IACrC,IAAIC,YAAY,GAAGZ,IAAI,CAACW,QAAQ,CAAC,SAAS,CAAC;IAE3C,IAAIE,eAAe,GAAGL,MAAM,CAACM,IAAI,CAC/BC,CAAC,IAAIA,CAAC,CAACf,IAAI,KAAK,eAAe,IAAIe,CAAC,CAACf,IAAI,KAAK,qBAChD,CAAC;;IAED;AACJ;AACA;IACI,IAAIa,eAAe,IAAIH,SAAS,EAAE;MAChC,OAAO,KAAK;IACd;IAEA,IAAIM,SAAS,GAAG,IAAInB,SAAS,CAAC;MAAEoB,OAAO,EAAE,CAAC;IAAE,CAAC,CAAC;IAC9C,IAAIC,MAAM,GAAGF,SAAS,CAACG,UAAU,CAACX,MAAM,EAAED,MAAM,CAAC;IACjD,IAAIa,GAAG,GAAGzB,UAAU,CAACU,IAAI,CAAC;IAC1Be,GAAG,GAAGxB,cAAc,CAACS,IAAI,EAAEe,GAAG,CAAC,IAAIA,GAAG;IAEtC,IAAIC,QAAQ,GAAGX,SAAS,GAAGU,GAAG,CAACE,GAAG,GAAGF,GAAG,CAACG,MAAM;IAE/C,IAAI,CAACL,MAAM,KAAK,cAAc,IAAIA,MAAM,KAAK,IAAI,KAAK,CAACL,eAAe,EAAE;MACtEQ,QAAQ,GAAG,IAAI;IACjB;IAEA,IAAIG,WAAW,GAAG/B,gBAAgB,CAAC;MACjCgB,KAAK;MACLW,GAAG,EAAEC;IACP,CAAC,CAAC;;IAEF;AACJ;AACA;IACIhB,IAAI,CAACoB,WAAW,CAAC;MACfzB,IAAI,EAAER,eAAe,CAAC;QAAEQ,IAAI;QAAEC;MAAO,CAAC,CAAC;MACvCQ,KAAK,EAAEe;IACT,CAAC,CAAC;IAEF,IAAIE,QAAQ,GAAGlB,MAAM,CAACmB,KAAK,CAACC,IAAI,CAACb,CAAC,IAAIA,CAAC,CAACf,IAAI,KAAK,gBAAgB,CAAC;IAClE,IAAI6B,aAAa,GAAG,KAAK;IAEzB,IAAIH,QAAQ,IAAI,CAACV,SAAS,CAACc,QAAQ,CAACJ,QAAQ,EAAEnB,MAAM,CAAC,EAAE;MACrDsB,aAAa,GAAGH,QAAQ,CAACjB,KAAK,CAACsB,IAAI,CAAC,CAAC;IACvC;IACA,IAAIb,MAAM,KAAK,WAAW,EAAE;MAC1B;AACN;AACA;MACM,IAAIc,OAAO,GAAGxB,MAAM,CAACmB,KAAK,CAACC,IAAI,CAACb,CAAC,IAAIA,CAAC,CAACf,IAAI,KAAK,oBAAoB,CAAC;MAErE,IAAI,CAACgC,OAAO,IAAInB,eAAe,EAAE;QAC/B,OAAOoB,SAAS;MAClB,CAAC,MAAM,IAAI,CAACD,OAAO,IAAI,CAACnB,eAAe,EAAE;QACvCR,IAAI,CAAC6B,IAAI,CACP3B,MAAM,EACN,iEACF,CAAC;QACD,OAAO0B,SAAS;MAClB;;MAEA;AACN;AACA;MACM,IAAIE,UAAU,GAAG3B,MAAM,CAACmB,KAAK,CAACC,IAAI,CAACb,CAAC,IAAI;QACtC,OAAOA,CAAC,CAACf,IAAI,KAAK,uBAAuB;MAC3C,CAAC,CAAC;MACF,IAAI,CAACmC,UAAU,IAAI,CAACtB,eAAe,EAAE;QACnCR,IAAI,CAAC6B,IAAI,CACP3B,MAAM,EACN,oEACF,CAAC;MACH;;MAEA;AACN;AACA;MACM,IAAIK,YAAY,IAAI,CAACC,eAAe,EAAE;QACpCnB,kBAAkB,CAACW,IAAI,EAAEE,MAAM,EAAEa,GAAG,EAAES,aAAa,CAAC;MACtD;IACF;IAEA,OAAOI,SAAS;EAClB;AACF;AAEAnC,eAAe,CAACsC,KAAK,GAAG,CACtB,oBAAoB,EACpB,uBAAuB,EACvB,WAAW,EACX,cAAc,CACf;AAEDC,MAAM,CAACC,OAAO,GAAGxC,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}