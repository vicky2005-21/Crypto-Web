{"ast":null,"code":"let {\n  list\n} = require('postcss');\nlet parser = require('postcss-value-parser');\nlet Browsers = require('./browsers');\nlet vendor = require('./vendor');\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property'];\n    this.prefixes = prefixes;\n  }\n\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n  add(decl, result) {\n    let prefix, prop;\n    let add = this.prefixes.add[decl.prop];\n    let vendorPrefixes = this.ruleVendorPrefixes(decl);\n    let declPrefixes = vendorPrefixes || add && add.prefixes || [];\n    let params = this.parse(decl.value);\n    let names = params.map(i => this.findProp(i));\n    let added = [];\n    if (names.some(i => i[0] === '-')) {\n      return;\n    }\n    for (let param of params) {\n      prop = this.findProp(param);\n      if (prop[0] === '-') continue;\n      let prefixer = this.prefixes.add[prop];\n      if (!prefixer || !prefixer.prefixes) continue;\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue;\n        }\n        let prefixed = this.prefixes.prefixed(prop, prefix);\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param));\n          }\n        }\n      }\n    }\n    params = params.concat(added);\n    let value = this.stringify(params);\n    let webkitClean = this.stringify(this.cleanFromUnprefixed(params, '-webkit-'));\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);\n    }\n    this.cloneBefore(decl, decl.prop, webkitClean);\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);\n    }\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue);\n      }\n    }\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl);\n      decl.cloneBefore();\n      decl.value = value;\n    }\n  }\n\n  /**\n   * Find property name\n   */\n  findProp(param) {\n    let prop = param[0].value;\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value;\n        }\n      }\n    }\n    return prop;\n  }\n\n  /**\n   * Does we already have this declaration\n   */\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value);\n  }\n\n  /**\n   * Add declaration if it is not exist\n   */\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({\n        prop,\n        value\n      });\n    }\n  }\n\n  /**\n   * Show transition-property warning\n   */\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return;\n    }\n    let isPrefixed = false;\n    let hasAssociatedProp = false;\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined;\n      }\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined;\n      }\n      let values = list.comma(i.value);\n      // check if current Rule's transition-property comma separated value list needs prefixes\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value];\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true;\n          }\n        });\n        return undefined;\n      }\n      // check if another transition-* prop in current Rule has comma separated value list\n      hasAssociatedProp = hasAssociatedProp || values.length > 1;\n      return false;\n    });\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(result, 'Replace transition-property to transition, ' + 'because Autoprefixer could not support ' + 'any cases of transition-property ' + 'and other transition-*');\n    }\n  }\n\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n  remove(decl) {\n    let params = this.parse(decl.value);\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)];\n      return !prop || !prop.remove;\n    });\n    let value = this.stringify(params);\n    if (decl.value === value) {\n      return;\n    }\n    if (params.length === 0) {\n      decl.remove();\n      return;\n    }\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value;\n    });\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length;\n    });\n    if (double || smaller) {\n      decl.remove();\n      return;\n    }\n    decl.value = value;\n  }\n\n  /**\n   * Parse properties list to array\n   */\n  parse(value) {\n    let ast = parser(value);\n    let result = [];\n    let param = [];\n    for (let node of ast.nodes) {\n      param.push(node);\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param);\n        param = [];\n      }\n    }\n    result.push(param);\n    return result.filter(i => i.length > 0);\n  }\n\n  /**\n   * Return properties string from array\n   */\n  stringify(params) {\n    if (params.length === 0) {\n      return '';\n    }\n    let nodes = [];\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params));\n      }\n      nodes = nodes.concat(param);\n    }\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1);\n    }\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined);\n    }\n    return parser.stringify({\n      nodes\n    });\n  }\n\n  /**\n   * Return new param array with different name\n   */\n  clone(origin, name, param) {\n    let result = [];\n    let changed = false;\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({\n          type: 'word',\n          value: name\n        });\n        changed = true;\n      } else {\n        result.push(i);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Find or create separator\n   */\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node;\n        }\n      }\n    }\n    return {\n      type: 'div',\n      value: ',',\n      after: ' '\n    };\n  }\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param));\n      return current === '' || current === prefix;\n    });\n  }\n\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params.map(i => this.findProp(i)).filter(i => i.slice(0, prefix.length) === prefix).map(i => this.prefixes.unprefixed(i));\n    let result = [];\n    for (let param of params) {\n      let prop = this.findProp(param);\n      let p = vendor.prefix(prop);\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Check property for disabled by option\n   */\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content'];\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true;\n      }\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009');\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n  ruleVendorPrefixes(decl) {\n    let {\n      parent\n    } = decl;\n    if (parent.type !== 'rule') {\n      return false;\n    } else if (!parent.selector.includes(':-')) {\n      return false;\n    }\n    let selectors = Browsers.prefixes().filter(s => parent.selector.includes(':' + s));\n    return selectors.length > 0 ? selectors : false;\n  }\n}\nmodule.exports = Transition;","map":{"version":3,"names":["list","require","parser","Browsers","vendor","Transition","constructor","prefixes","props","add","decl","result","prefix","prop","vendorPrefixes","ruleVendorPrefixes","declPrefixes","params","parse","value","names","map","i","findProp","added","some","param","prefixer","p","includes","prefixed","disabled","push","clone","concat","stringify","webkitClean","cleanFromUnprefixed","cloneBefore","operaClean","prefixValue","cleanOtherPrefixes","already","checkForWarning","test","token","entries","type","parent","isPrefixed","hasAssociatedProp","each","undefined","indexOf","values","comma","forEach","lookup","length","warn","remove","filter","double","smaller","ast","node","nodes","div","slice","origin","name","changed","after","current","unprefixed","other","options","flexbox","selector","selectors","s","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/gta-final/node_modules/autoprefixer/lib/transition.js"],"sourcesContent":["let { list } = require('postcss')\nlet parser = require('postcss-value-parser')\n\nlet Browsers = require('./browsers')\nlet vendor = require('./vendor')\n\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property']\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n  add(decl, result) {\n    let prefix, prop\n    let add = this.prefixes.add[decl.prop]\n    let vendorPrefixes = this.ruleVendorPrefixes(decl)\n    let declPrefixes = vendorPrefixes || (add && add.prefixes) || []\n\n    let params = this.parse(decl.value)\n    let names = params.map(i => this.findProp(i))\n    let added = []\n\n    if (names.some(i => i[0] === '-')) {\n      return\n    }\n\n    for (let param of params) {\n      prop = this.findProp(param)\n      if (prop[0] === '-') continue\n\n      let prefixer = this.prefixes.add[prop]\n      if (!prefixer || !prefixer.prefixes) continue\n\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue\n        }\n\n        let prefixed = this.prefixes.prefixed(prop, prefix)\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param))\n          }\n        }\n      }\n    }\n\n    params = params.concat(added)\n    let value = this.stringify(params)\n\n    let webkitClean = this.stringify(\n      this.cleanFromUnprefixed(params, '-webkit-')\n    )\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean)\n    }\n    this.cloneBefore(decl, decl.prop, webkitClean)\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'))\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean)\n    }\n\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(\n          this.cleanOtherPrefixes(params, prefix)\n        )\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue)\n      }\n    }\n\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl)\n      decl.cloneBefore()\n      decl.value = value\n    }\n  }\n\n  /**\n   * Find property name\n   */\n  findProp(param) {\n    let prop = param[0].value\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value\n        }\n      }\n    }\n    return prop\n  }\n\n  /**\n   * Does we already have this declaration\n   */\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value)\n  }\n\n  /**\n   * Add declaration if it is not exist\n   */\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({ prop, value })\n    }\n  }\n\n  /**\n   * Show transition-property warning\n   */\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return\n    }\n\n    let isPrefixed = false\n    let hasAssociatedProp = false\n\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined\n      }\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined\n      }\n      let values = list.comma(i.value)\n      // check if current Rule's transition-property comma separated value list needs prefixes\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value]\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true\n          }\n        })\n        return undefined\n      }\n      // check if another transition-* prop in current Rule has comma separated value list\n      hasAssociatedProp = hasAssociatedProp || values.length > 1\n      return false\n    })\n\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(\n        result,\n        'Replace transition-property to transition, ' +\n          'because Autoprefixer could not support ' +\n          'any cases of transition-property ' +\n          'and other transition-*'\n      )\n    }\n  }\n\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n  remove(decl) {\n    let params = this.parse(decl.value)\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)]\n      return !prop || !prop.remove\n    })\n    let value = this.stringify(params)\n\n    if (decl.value === value) {\n      return\n    }\n\n    if (params.length === 0) {\n      decl.remove()\n      return\n    }\n\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value\n    })\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length\n    })\n\n    if (double || smaller) {\n      decl.remove()\n      return\n    }\n\n    decl.value = value\n  }\n\n  /**\n   * Parse properties list to array\n   */\n  parse(value) {\n    let ast = parser(value)\n    let result = []\n    let param = []\n    for (let node of ast.nodes) {\n      param.push(node)\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param)\n        param = []\n      }\n    }\n    result.push(param)\n    return result.filter(i => i.length > 0)\n  }\n\n  /**\n   * Return properties string from array\n   */\n  stringify(params) {\n    if (params.length === 0) {\n      return ''\n    }\n    let nodes = []\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params))\n      }\n      nodes = nodes.concat(param)\n    }\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1)\n    }\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined)\n    }\n    return parser.stringify({ nodes })\n  }\n\n  /**\n   * Return new param array with different name\n   */\n  clone(origin, name, param) {\n    let result = []\n    let changed = false\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({ type: 'word', value: name })\n        changed = true\n      } else {\n        result.push(i)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Find or create separator\n   */\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node\n        }\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param))\n      return current === '' || current === prefix\n    })\n  }\n\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params\n      .map(i => this.findProp(i))\n      .filter(i => i.slice(0, prefix.length) === prefix)\n      .map(i => this.prefixes.unprefixed(i))\n\n    let result = []\n    for (let param of params) {\n      let prop = this.findProp(param)\n      let p = vendor.prefix(prop)\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Check property for disabled by option\n   */\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content']\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true\n      }\n\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009')\n      }\n    }\n    return undefined\n  }\n\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n  ruleVendorPrefixes(decl) {\n    let { parent } = decl\n\n    if (parent.type !== 'rule') {\n      return false\n    } else if (!parent.selector.includes(':-')) {\n      return false\n    }\n\n    let selectors = Browsers.prefixes().filter(s =>\n      parent.selector.includes(':' + s)\n    )\n\n    return selectors.length > 0 ? selectors : false\n  }\n}\n\nmodule.exports = Transition\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}