{"ast":null,"code":"var AND_REGEXP = /^\\s+and\\s+(.*)/i;\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i;\nfunction flatten(array) {\n  if (!Array.isArray(array)) return [array];\n  return array.reduce(function (a, b) {\n    return a.concat(flatten(b));\n  }, []);\n}\nfunction find(string, predicate) {\n  for (var n = 1, max = string.length; n <= max; n++) {\n    var parsed = string.substr(-n, n);\n    if (predicate(parsed, n, max)) {\n      return string.slice(0, -n);\n    }\n  }\n  return '';\n}\nfunction matchQuery(all, query) {\n  var node = {\n    query: query\n  };\n  if (query.indexOf('not ') === 0) {\n    node.not = true;\n    query = query.slice(4);\n  }\n  for (var name in all) {\n    var type = all[name];\n    var match = query.match(type.regexp);\n    if (match) {\n      node.type = name;\n      for (var i = 0; i < type.matches.length; i++) {\n        node[type.matches[i]] = match[i + 1];\n      }\n      return node;\n    }\n  }\n  node.type = 'unknown';\n  return node;\n}\nfunction matchBlock(all, string, qs) {\n  var node;\n  return find(string, function (parsed, n, max) {\n    if (AND_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(AND_REGEXP)[1]);\n      node.compose = 'and';\n      qs.unshift(node);\n      return true;\n    } else if (OR_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(OR_REGEXP)[1]);\n      node.compose = 'or';\n      qs.unshift(node);\n      return true;\n    } else if (n === max) {\n      node = matchQuery(all, parsed.trim());\n      node.compose = 'or';\n      qs.unshift(node);\n      return true;\n    }\n    return false;\n  });\n}\nmodule.exports = function parse(all, queries) {\n  if (!Array.isArray(queries)) queries = [queries];\n  return flatten(queries.map(function (block) {\n    var qs = [];\n    do {\n      block = matchBlock(all, block, qs);\n    } while (block);\n    return qs;\n  }));\n};","map":{"version":3,"names":["AND_REGEXP","OR_REGEXP","flatten","array","Array","isArray","reduce","a","b","concat","find","string","predicate","n","max","length","parsed","substr","slice","matchQuery","all","query","node","indexOf","not","name","type","match","regexp","i","matches","matchBlock","qs","test","compose","unshift","trim","module","exports","parse","queries","map","block"],"sources":["/Users/vigneshchowdary/Desktop/gta-final/node_modules/browserslist/parse.js"],"sourcesContent":["var AND_REGEXP = /^\\s+and\\s+(.*)/i\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) return [array]\n  return array.reduce(function (a, b) {\n    return a.concat(flatten(b))\n  }, [])\n}\n\nfunction find(string, predicate) {\n  for (var n = 1, max = string.length; n <= max; n++) {\n    var parsed = string.substr(-n, n)\n    if (predicate(parsed, n, max)) {\n      return string.slice(0, -n)\n    }\n  }\n  return ''\n}\n\nfunction matchQuery(all, query) {\n  var node = { query: query }\n  if (query.indexOf('not ') === 0) {\n    node.not = true\n    query = query.slice(4)\n  }\n\n  for (var name in all) {\n    var type = all[name]\n    var match = query.match(type.regexp)\n    if (match) {\n      node.type = name\n      for (var i = 0; i < type.matches.length; i++) {\n        node[type.matches[i]] = match[i + 1]\n      }\n      return node\n    }\n  }\n\n  node.type = 'unknown'\n  return node\n}\n\nfunction matchBlock(all, string, qs) {\n  var node\n  return find(string, function (parsed, n, max) {\n    if (AND_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(AND_REGEXP)[1])\n      node.compose = 'and'\n      qs.unshift(node)\n      return true\n    } else if (OR_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(OR_REGEXP)[1])\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    } else if (n === max) {\n      node = matchQuery(all, parsed.trim())\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    }\n    return false\n  })\n}\n\nmodule.exports = function parse(all, queries) {\n  if (!Array.isArray(queries)) queries = [queries]\n  return flatten(\n    queries.map(function (block) {\n      var qs = []\n      do {\n        block = matchBlock(all, block, qs)\n      } while (block)\n      return qs\n    })\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}