{"ast":null,"code":"/**\n * @license Fraction.js v4.2.0 05/03/2022\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function (root) {\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n  function assign(n, s) {\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n    n = n < 0 ? -n : n;\n    var a = gcd(n, d);\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n  function factorize(num) {\n    var factors = {};\n    var n = num;\n    var i = 2;\n    var s = 4;\n    while (s <= n) {\n      while (n % i === 0) {\n        n /= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s += 1 + 2 * i++;\n    }\n    if (n !== num) {\n      if (n > 1) factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n  var parse = function (p1, p2) {\n    var n = 0,\n      d = 1,\n      s = 1;\n    var v = 0,\n      w = 0,\n      x = 0,\n      y = 1,\n      z = 1;\n    var A = 0,\n      B = 1;\n    var C = 1,\n      D = 1;\n    var N = 10000000;\n    var M;\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n    } else switch (typeof p1) {\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1) n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1) d = p1[1];\n          } else {\n            throw Fraction['InvalidParameter'];\n          }\n          s = n * d;\n          break;\n        }\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) {\n            // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n              } else {\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n          if (B === null) throw Fraction['InvalidParameter'];\n          if (B[A] === '-') {\n            // Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {\n            // Check for plus sign at the beginning\n            A++;\n          }\n          if (B.length === A + 1) {\n            // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') {\n            // Check if it's a decimal number\n\n            if (B[A] !== '.') {\n              // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') {\n            // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') {\n            // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n          if (B.length <= A) {\n            // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n\n      default:\n        throw Fraction['InvalidParameter'];\n    }\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n  function modpow(b, e, m) {\n    var r = 1;\n    for (; e > 0; b = b * b % m, e >>= 1) {\n      if (e & 1) {\n        r = r * b % m;\n      }\n    }\n    return r;\n  }\n  function cycleLen(n, d) {\n    for (; d % 2 === 0; d /= 2) {}\n    for (; d % 5 === 0; d /= 5) {}\n    if (d === 1)\n      // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n      if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n\n    return t;\n  }\n  function cycleStart(n, d, len) {\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n    for (var t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2) return t;\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n  ;\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n    parse(a, b);\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n  Fraction.prototype = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function () {\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function () {\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n    },\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function () {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function (a, b) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function (a, b) {\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function (a, b) {\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function (places) {\n      places = Math.pow(10, places || 0);\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function (places) {\n      places = Math.pow(10, places || 0);\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function (places) {\n      places = Math.pow(10, places || 0);\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function () {\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function (a, b) {\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k] *= P['n'];\n        if (N[k] % P['d'] === 0) {\n          N[k] /= P['d'];\n        } else return null;\n        n *= Math.pow(k, N[k]);\n      }\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k] *= P['n'];\n        if (D[k] % P['d'] === 0) {\n          D[k] /= P['d'];\n        } else return null;\n        d *= Math.pow(k, D[k]);\n      }\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function (a, b) {\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function (a, b) {\n      parse(a, b);\n      var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n      return (0 < t) - (t < 0);\n    },\n    \"simplify\": function (eps) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n      eps = eps || 0.001;\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n      for (var i = 1; i < cont.length; i++) {\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function (a, b) {\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n    },\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function () {\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function (excludeWhole) {\n      var whole,\n        str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function (excludeWhole) {\n      var whole,\n        str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function () {\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n      return res;\n    },\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function (dec) {\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n      str += N / D | 0;\n      N %= D;\n      N *= 10;\n      if (N) str += \".\";\n      if (cycLen) {\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", {\n      'value': true\n    });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n})(this);","map":{"version":3,"names":["root","MAX_CYCLE_LEN","P","assign","n","s","isNaN","parseInt","Fraction","newFraction","d","f","Object","create","prototype","a","gcd","factorize","num","factors","i","parse","p1","p2","v","w","x","y","z","A","B","C","D","N","M","undefined","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","Error","neg","add","sub","mul","div","clone","mod","lcm","ceil","places","round","inverse","k","equals","compare","simplify","eps","thisABS","cont","valueOf","divisible","toFraction","excludeWhole","whole","str","toLatex","toContinued","res","push","toString","dec","cycLen","cycOff","define","exports","defineProperty","module"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/fraction.js/fraction.js"],"sourcesContent":["/**\n * @license Fraction.js v4.2.0 05/03/2022\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n\n    n = n < 0 ? -n : n;\n\n    var a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    var factors = {};\n\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n\n      while (n % i === 0) {\n        n/= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s+= 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n*= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throw Fraction['InvalidParameter'];\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1/= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A+= C;\n                    B+= D;\n                  } else {\n                    C+= A;\n                    D+= B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n*= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throw Fraction['InvalidParameter'];\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A+= 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A+= 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A+= 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throw Fraction['InvalidParameter'];\n      }\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d/= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d/= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,IAAI,EAAE;EAEd,YAAY;;EAEZ;EACA;EACA;EACA,IAAIC,aAAa,GAAG,IAAI;;EAExB;EACA,IAAIC,CAAC,GAAG;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE;EACP,CAAC;EAED,SAASC,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAEpB,IAAIC,KAAK,CAACF,CAAC,GAAGG,QAAQ,CAACH,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;MAC9B,MAAMI,QAAQ,CAAC,kBAAkB,CAAC;IACpC;IACA,OAAOJ,CAAC,GAAGC,CAAC;EACd;;EAEA;EACA,SAASI,WAAWA,CAACL,CAAC,EAAEM,CAAC,EAAE;IAEzB,IAAIA,CAAC,KAAK,CAAC,EAAE;MACX,MAAMF,QAAQ,CAAC,gBAAgB,CAAC;IAClC;IAEA,IAAIG,CAAC,GAAGC,MAAM,CAACC,MAAM,CAACL,QAAQ,CAACM,SAAS,CAAC;IACzCH,CAAC,CAAC,GAAG,CAAC,GAAGP,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAEvBA,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,CAACA,CAAC,GAAGA,CAAC;IAElB,IAAIW,CAAC,GAAGC,GAAG,CAACZ,CAAC,EAAEM,CAAC,CAAC;IAEjBC,CAAC,CAAC,GAAG,CAAC,GAAGP,CAAC,GAAGW,CAAC;IACdJ,CAAC,CAAC,GAAG,CAAC,GAAGD,CAAC,GAAGK,CAAC;IACd,OAAOJ,CAAC;EACV;EAEA,SAASM,SAASA,CAACC,GAAG,EAAE;IAEtB,IAAIC,OAAO,GAAG,CAAC,CAAC;IAEhB,IAAIf,CAAC,GAAGc,GAAG;IACX,IAAIE,CAAC,GAAG,CAAC;IACT,IAAIf,CAAC,GAAG,CAAC;IAET,OAAOA,CAAC,IAAID,CAAC,EAAE;MAEb,OAAOA,CAAC,GAAGgB,CAAC,KAAK,CAAC,EAAE;QAClBhB,CAAC,IAAGgB,CAAC;QACLD,OAAO,CAACC,CAAC,CAAC,GAAG,CAACD,OAAO,CAACC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;MACpC;MACAf,CAAC,IAAG,CAAC,GAAG,CAAC,GAAGe,CAAC,EAAE;IACjB;IAEA,IAAIhB,CAAC,KAAKc,GAAG,EAAE;MACb,IAAId,CAAC,GAAG,CAAC,EACPe,OAAO,CAACf,CAAC,CAAC,GAAG,CAACe,OAAO,CAACf,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACtC,CAAC,MAAM;MACLe,OAAO,CAACD,GAAG,CAAC,GAAG,CAACC,OAAO,CAACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IACxC;IACA,OAAOC,OAAO;EAChB;EAEA,IAAIE,KAAK,GAAG,SAAAA,CAASC,EAAE,EAAEC,EAAE,EAAE;IAE3B,IAAInB,CAAC,GAAG,CAAC;MAAEM,CAAC,GAAG,CAAC;MAAEL,CAAC,GAAG,CAAC;IACvB,IAAImB,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;IAErC,IAAIC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;IAChB,IAAIC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC;IAEhB,IAAIC,CAAC,GAAG,QAAQ;IAChB,IAAIC,CAAC;IAEL,IAAIZ,EAAE,KAAKa,SAAS,IAAIb,EAAE,KAAK,IAAI,EAAE;MACnC;IAAA,CACD,MAAM,IAAIC,EAAE,KAAKY,SAAS,EAAE;MAC3B/B,CAAC,GAAGkB,EAAE;MACNZ,CAAC,GAAGa,EAAE;MACNlB,CAAC,GAAGD,CAAC,GAAGM,CAAC;MAET,IAAIN,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QAC9B,MAAMF,QAAQ,CAAC,qBAAqB,CAAC;MACvC;IAEF,CAAC,MACC,QAAQ,OAAOc,EAAE;MAEf,KAAK,QAAQ;QACX;UACE,IAAI,GAAG,IAAIA,EAAE,IAAI,GAAG,IAAIA,EAAE,EAAE;YAC1BlB,CAAC,GAAGkB,EAAE,CAAC,GAAG,CAAC;YACXZ,CAAC,GAAGY,EAAE,CAAC,GAAG,CAAC;YACX,IAAI,GAAG,IAAIA,EAAE,EACXlB,CAAC,IAAGkB,EAAE,CAAC,GAAG,CAAC;UACf,CAAC,MAAM,IAAI,CAAC,IAAIA,EAAE,EAAE;YAClBlB,CAAC,GAAGkB,EAAE,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,IAAIA,EAAE,EACTZ,CAAC,GAAGY,EAAE,CAAC,CAAC,CAAC;UACb,CAAC,MAAM;YACL,MAAMd,QAAQ,CAAC,kBAAkB,CAAC;UACpC;UACAH,CAAC,GAAGD,CAAC,GAAGM,CAAC;UACT;QACF;MACF,KAAK,QAAQ;QACX;UACE,IAAIY,EAAE,GAAG,CAAC,EAAE;YACVjB,CAAC,GAAGiB,EAAE;YACNA,EAAE,GAAG,CAACA,EAAE;UACV;UAEA,IAAIA,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;YAChBlB,CAAC,GAAGkB,EAAE;UACR,CAAC,MAAM,IAAIA,EAAE,GAAG,CAAC,EAAE;YAAE;;YAEnB,IAAIA,EAAE,IAAI,CAAC,EAAE;cACXM,CAAC,GAAGQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAED,IAAI,CAACE,KAAK,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACjB,EAAE,CAAC,GAAGc,IAAI,CAACI,IAAI,CAAC,CAAC;cAC1DlB,EAAE,IAAGM,CAAC;YACR;;YAEA;YACA;;YAEA,OAAOE,CAAC,IAAIG,CAAC,IAAID,CAAC,IAAIC,CAAC,EAAE;cACvBC,CAAC,GAAG,CAACL,CAAC,GAAGE,CAAC,KAAKD,CAAC,GAAGE,CAAC,CAAC;cAErB,IAAIV,EAAE,KAAKY,CAAC,EAAE;gBACZ,IAAIJ,CAAC,GAAGE,CAAC,IAAIC,CAAC,EAAE;kBACd7B,CAAC,GAAGyB,CAAC,GAAGE,CAAC;kBACTrB,CAAC,GAAGoB,CAAC,GAAGE,CAAC;gBACX,CAAC,MAAM,IAAIA,CAAC,GAAGF,CAAC,EAAE;kBAChB1B,CAAC,GAAG2B,CAAC;kBACLrB,CAAC,GAAGsB,CAAC;gBACP,CAAC,MAAM;kBACL5B,CAAC,GAAGyB,CAAC;kBACLnB,CAAC,GAAGoB,CAAC;gBACP;gBACA;cAEF,CAAC,MAAM;gBAEL,IAAIR,EAAE,GAAGY,CAAC,EAAE;kBACVL,CAAC,IAAGE,CAAC;kBACLD,CAAC,IAAGE,CAAC;gBACP,CAAC,MAAM;kBACLD,CAAC,IAAGF,CAAC;kBACLG,CAAC,IAAGF,CAAC;gBACP;gBAEA,IAAIA,CAAC,GAAGG,CAAC,EAAE;kBACT7B,CAAC,GAAG2B,CAAC;kBACLrB,CAAC,GAAGsB,CAAC;gBACP,CAAC,MAAM;kBACL5B,CAAC,GAAGyB,CAAC;kBACLnB,CAAC,GAAGoB,CAAC;gBACP;cACF;YACF;YACA1B,CAAC,IAAGwB,CAAC;UACP,CAAC,MAAM,IAAItB,KAAK,CAACgB,EAAE,CAAC,IAAIhB,KAAK,CAACiB,EAAE,CAAC,EAAE;YACjCb,CAAC,GAAGN,CAAC,GAAGqC,GAAG;UACb;UACA;QACF;MACF,KAAK,QAAQ;QACX;UACEX,CAAC,GAAGR,EAAE,CAACoB,KAAK,CAAC,QAAQ,CAAC;UAEtB,IAAIZ,CAAC,KAAK,IAAI,EACZ,MAAMtB,QAAQ,CAAC,kBAAkB,CAAC;UAEpC,IAAIsB,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,EAAE;YAAC;YACjBxB,CAAC,GAAG,CAAC,CAAC;YACNwB,CAAC,EAAE;UACL,CAAC,MAAM,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,EAAE;YAAC;YACxBA,CAAC,EAAE;UACL;UAEA,IAAIC,CAAC,CAACa,MAAM,KAAKd,CAAC,GAAG,CAAC,EAAE;YAAE;YACxBJ,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,EAAE,CAAC,EAAExB,CAAC,CAAC;UACvB,CAAC,MAAM,IAAIyB,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,EAAE;YAAE;;YAE7C,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,EAAE;cAAE;cAClBL,CAAC,GAAGrB,MAAM,CAAC2B,CAAC,CAACD,CAAC,EAAE,CAAC,EAAExB,CAAC,CAAC;YACvB;YACAwB,CAAC,EAAE;;YAEH;YACA,IAAIA,CAAC,GAAG,CAAC,KAAKC,CAAC,CAACa,MAAM,IAAIb,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;cACtGJ,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,CAAC,EAAExB,CAAC,CAAC;cACnBsB,CAAC,GAAGS,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEP,CAAC,CAACD,CAAC,CAAC,CAACc,MAAM,CAAC;cAC7Bd,CAAC,EAAE;YACL;;YAEA;YACA,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;cACxEH,CAAC,GAAGvB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAAExB,CAAC,CAAC;cACvBuB,CAAC,GAAGQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEP,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,CAACc,MAAM,CAAC,GAAG,CAAC;cACrCd,CAAC,IAAG,CAAC;YACP;UAEF,CAAC,MAAM,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YAAE;YACjDJ,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,CAAC,EAAExB,CAAC,CAAC;YACnBsB,CAAC,GAAGxB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YACvBA,CAAC,IAAG,CAAC;UACP,CAAC,MAAM,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YAAE;YACjDL,CAAC,GAAGrB,MAAM,CAAC2B,CAAC,CAACD,CAAC,CAAC,EAAExB,CAAC,CAAC;YACnBoB,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAAExB,CAAC,CAAC;YACvBsB,CAAC,GAAGxB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YACvBA,CAAC,IAAG,CAAC;UACP;UAEA,IAAIC,CAAC,CAACa,MAAM,IAAId,CAAC,EAAE;YAAE;YACnBnB,CAAC,GAAGiB,CAAC,GAAGC,CAAC;YACTvB,CAAC,GAAG;YACJD,CAAC,GAAGsB,CAAC,GAAGhB,CAAC,GAAGc,CAAC,GAAGI,CAAC,GAAGH,CAAC;YACrB;UACF;;UAEA;QACF;;MACF;QACE,MAAMjB,QAAQ,CAAC,kBAAkB,CAAC;IACtC;IAEF,IAAIE,CAAC,KAAK,CAAC,EAAE;MACX,MAAMF,QAAQ,CAAC,gBAAgB,CAAC;IAClC;IAEAN,CAAC,CAAC,GAAG,CAAC,GAAGG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACvBH,CAAC,CAAC,GAAG,CAAC,GAAGkC,IAAI,CAACQ,GAAG,CAACxC,CAAC,CAAC;IACpBF,CAAC,CAAC,GAAG,CAAC,GAAGkC,IAAI,CAACQ,GAAG,CAAClC,CAAC,CAAC;EACtB,CAAC;EAED,SAASmC,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAEvB,IAAIC,CAAC,GAAG,CAAC;IACT,OAAOF,CAAC,GAAG,CAAC,EAAED,CAAC,GAAIA,CAAC,GAAGA,CAAC,GAAIE,CAAC,EAAED,CAAC,KAAK,CAAC,EAAE;MAEtC,IAAIA,CAAC,GAAG,CAAC,EAAE;QACTE,CAAC,GAAIA,CAAC,GAAGH,CAAC,GAAIE,CAAC;MACjB;IACF;IACA,OAAOC,CAAC;EACV;EAGA,SAASC,QAAQA,CAAC9C,CAAC,EAAEM,CAAC,EAAE;IAEtB,OAAOA,CAAC,GAAG,CAAC,KAAK,CAAC,EAChBA,CAAC,IAAG,CAAC,EAAE,CACT;IAEA,OAAOA,CAAC,GAAG,CAAC,KAAK,CAAC,EAChBA,CAAC,IAAG,CAAC,EAAE,CACT;IAEA,IAAIA,CAAC,KAAK,CAAC;MAAE;MACX,OAAO,CAAC;;IAEV;IACA;IACA;IACA;;IAEA,IAAIyC,GAAG,GAAG,EAAE,GAAGzC,CAAC;IAChB,IAAI0C,CAAC,GAAG,CAAC;IAET,OAAOD,GAAG,KAAK,CAAC,EAAEC,CAAC,EAAE,EAAE;MACrBD,GAAG,GAAGA,GAAG,GAAG,EAAE,GAAGzC,CAAC;MAElB,IAAI0C,CAAC,GAAGnD,aAAa,EACnB,OAAO,CAAC,CAAC,CAAC;IACd;;IACA,OAAOmD,CAAC;EACV;EAGA,SAASC,UAAUA,CAACjD,CAAC,EAAEM,CAAC,EAAE4C,GAAG,EAAE;IAE7B,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,IAAI,GAAGX,MAAM,CAAC,EAAE,EAAES,GAAG,EAAE5C,CAAC,CAAC;IAE7B,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAAE;MAC9B;;MAEA,IAAIG,IAAI,KAAKC,IAAI,EACf,OAAOJ,CAAC;MAEVG,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAG7C,CAAC;MACpB8C,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAG9C,CAAC;IACtB;IACA,OAAO,CAAC;EACV;EAEA,SAASM,GAAGA,CAACD,CAAC,EAAE+B,CAAC,EAAE;IAEjB,IAAI,CAAC/B,CAAC,EACJ,OAAO+B,CAAC;IACV,IAAI,CAACA,CAAC,EACJ,OAAO/B,CAAC;IAEV,OAAO,CAAC,EAAE;MACRA,CAAC,IAAG+B,CAAC;MACL,IAAI,CAAC/B,CAAC,EACJ,OAAO+B,CAAC;MACVA,CAAC,IAAG/B,CAAC;MACL,IAAI,CAAC+B,CAAC,EACJ,OAAO/B,CAAC;IACZ;EACF;EAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASP,QAAQA,CAACO,CAAC,EAAE+B,CAAC,EAAE;IAEtBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;IAEX,IAAI,IAAI,YAAYtC,QAAQ,EAAE;MAC5BO,CAAC,GAAGC,GAAG,CAACd,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzB,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC;MAClB,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAGa,CAAC;MACtB,IAAI,CAAC,GAAG,CAAC,GAAGb,CAAC,CAAC,GAAG,CAAC,GAAGa,CAAC;IACxB,CAAC,MAAM;MACL,OAAON,WAAW,CAACP,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7C;EACF;EAEAM,QAAQ,CAAC,gBAAgB,CAAC,GAAG,IAAIiD,KAAK,CAAC,kBAAkB,CAAC;EAC1DjD,QAAQ,CAAC,kBAAkB,CAAC,GAAG,IAAIiD,KAAK,CAAC,kBAAkB,CAAC;EAC5DjD,QAAQ,CAAC,qBAAqB,CAAC,GAAG,IAAIiD,KAAK,CAAC,4BAA4B,CAAC;EAEzEjD,QAAQ,CAACM,SAAS,GAAG;IAEnB,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IAEN;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA8B,CAAA,EAAW;MAEhB,OAAOnC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAiD,CAAA,EAAW;MAEhB,OAAOjD,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACvD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAkD,CAAS5C,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAOrC,WAAW,CAChB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EAC5D,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CACnB,CAAC;IACH,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA0D,CAAS7C,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAOrC,WAAW,CAChB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EAC5D,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CACnB,CAAC;IACH,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA2D,CAAS9C,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAOrC,WAAW,CAChB,IAAI,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EACvC,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CACnB,CAAC;IACH,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA4D,CAAS/C,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAOrC,WAAW,CAChB,IAAI,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,EACvC,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CACnB,CAAC;IACH,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA6D,CAAA,EAAW;MAClB,OAAOtD,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAuD,CAASjD,CAAC,EAAE+B,CAAC,EAAE;MAEpB,IAAIxC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACxC,OAAO,IAAIE,QAAQ,CAACiC,GAAG,CAAC;MAC1B;MAEA,IAAI1B,CAAC,KAAKoB,SAAS,EAAE;QACnB,OAAO1B,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAC1D;MAEAY,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,IAAI,CAAC,KAAK5C,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE;QACnC,MAAMM,QAAQ,CAAC,gBAAgB,CAAC;MAClC;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM;AACN;AACA;AACA;AACA;MACM,OAAOC,WAAW,CAChB,IAAI,CAAC,GAAG,CAAC,IAAIP,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EACvDA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CACnB,CAAC;IACH,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAc,CAASD,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;;MAEX;;MAEA,OAAOrC,WAAW,CAACO,GAAG,CAACd,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGc,GAAG,CAACd,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACzF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA+D,CAASlD,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;;MAEX;;MAEA,IAAI5C,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACnC,OAAOO,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1B;MACA,OAAOA,WAAW,CAACP,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAEc,GAAG,CAACd,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGc,GAAG,CAACd,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACzF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAgE,CAASC,MAAM,EAAE;MAEvBA,MAAM,GAAG/B,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE8B,MAAM,IAAI,CAAC,CAAC;MAElC,IAAI7D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACxC,OAAO,IAAIE,QAAQ,CAACiC,GAAG,CAAC;MAC1B;MACA,OAAOhC,WAAW,CAAC2B,IAAI,CAAC8B,IAAI,CAACC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAEA,MAAM,CAAC;IACnF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA7B,CAAS6B,MAAM,EAAE;MAExBA,MAAM,GAAG/B,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE8B,MAAM,IAAI,CAAC,CAAC;MAElC,IAAI7D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACxC,OAAO,IAAIE,QAAQ,CAACiC,GAAG,CAAC;MAC1B;MACA,OAAOhC,WAAW,CAAC2B,IAAI,CAACE,KAAK,CAAC6B,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAEA,MAAM,CAAC;IACpF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAC,CAASD,MAAM,EAAE;MAExBA,MAAM,GAAG/B,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE8B,MAAM,IAAI,CAAC,CAAC;MAElC,IAAI7D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACxC,OAAO,IAAIE,QAAQ,CAACiC,GAAG,CAAC;MAC1B;MACA,OAAOhC,WAAW,CAAC2B,IAAI,CAACgC,KAAK,CAACD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAEA,MAAM,CAAC;IACpF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAAE,CAAA,EAAW;MAEpB,OAAO5D,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA4B,CAAStB,CAAC,EAAE+B,CAAC,EAAE;MAEpBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;;MAEX;;MAEA,IAAI5C,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QAEhB,IAAIA,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;UACd,OAAOO,WAAW,CAAC2B,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAEnC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAEkC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAEnC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1F,CAAC,MAAM;UACL,OAAOO,WAAW,CAAC2B,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAEnC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAEkC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAEnC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1F;MACF;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI;;MAE9B;MACA,IAAI+B,CAAC,GAAGhB,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC5B,IAAIe,CAAC,GAAGf,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;MAE5B;MACA,IAAIb,CAAC,GAAG,CAAC;MACT,IAAIM,CAAC,GAAG,CAAC;MACT,KAAK,IAAI4D,CAAC,IAAIrC,CAAC,EAAE;QACf,IAAIqC,CAAC,KAAK,GAAG,EAAE;QACf,IAAIA,CAAC,KAAK,GAAG,EAAE;UACblE,CAAC,GAAG,CAAC;UACL;QACF;QACA6B,CAAC,CAACqC,CAAC,CAAC,IAAGpE,CAAC,CAAC,GAAG,CAAC;QAEb,IAAI+B,CAAC,CAACqC,CAAC,CAAC,GAAGpE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACvB+B,CAAC,CAACqC,CAAC,CAAC,IAAGpE,CAAC,CAAC,GAAG,CAAC;QACf,CAAC,MAAM,OAAO,IAAI;QAClBE,CAAC,IAAGgC,IAAI,CAACC,GAAG,CAACiC,CAAC,EAAErC,CAAC,CAACqC,CAAC,CAAC,CAAC;MACvB;MAEA,KAAK,IAAIA,CAAC,IAAItC,CAAC,EAAE;QACf,IAAIsC,CAAC,KAAK,GAAG,EAAE;QACftC,CAAC,CAACsC,CAAC,CAAC,IAAGpE,CAAC,CAAC,GAAG,CAAC;QAEb,IAAI8B,CAAC,CAACsC,CAAC,CAAC,GAAGpE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACvB8B,CAAC,CAACsC,CAAC,CAAC,IAAGpE,CAAC,CAAC,GAAG,CAAC;QACf,CAAC,MAAM,OAAO,IAAI;QAClBQ,CAAC,IAAG0B,IAAI,CAACC,GAAG,CAACiC,CAAC,EAAEtC,CAAC,CAACsC,CAAC,CAAC,CAAC;MACvB;MAEA,IAAIpE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACd,OAAOO,WAAW,CAACC,CAAC,EAAEN,CAAC,CAAC;MAC1B;MACA,OAAOK,WAAW,CAACL,CAAC,EAAEM,CAAC,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,QAAQ,EAAE,SAAA6D,CAASxD,CAAC,EAAE+B,CAAC,EAAE;MAEvBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG5C,CAAC,CAAC,GAAG,CAAC,KAAKA,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACzE,CAAC;;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAAsE,CAASzD,CAAC,EAAE+B,CAAC,EAAE;MAExBzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,IAAIM,CAAC,GAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAGlD,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAE;MACtE,OAAO,CAAC,CAAC,GAAGkD,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU,EAAE,SAAAqB,CAASC,GAAG,EAAE;MAExB,IAAIpE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QACxC,OAAO,IAAI;MACb;MAEAoE,GAAG,GAAGA,GAAG,IAAI,KAAK;MAElB,IAAIC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;MAC3B,IAAIC,IAAI,GAAGD,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;MAEnC,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwD,IAAI,CAACjC,MAAM,EAAEvB,CAAC,EAAE,EAAE;QAEpC,IAAIf,CAAC,GAAGI,WAAW,CAACmE,IAAI,CAACxD,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QACnC,KAAK,IAAIkD,CAAC,GAAGlD,CAAC,GAAG,CAAC,EAAEkD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC/BjE,CAAC,GAAGA,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAACuE,IAAI,CAACN,CAAC,CAAC,CAAC;QACpC;QAEA,IAAIjE,CAAC,CAAC,KAAK,CAAC,CAACsE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC,GAAGH,GAAG,EAAE;UAC9C,OAAOrE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B;MACF;MACA,OAAO,IAAI;IACb,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,WAAW,EAAE,SAAAyE,CAAS/D,CAAC,EAAE+B,CAAC,EAAE;MAE1BzB,KAAK,CAACN,CAAC,EAAE+B,CAAC,CAAC;MACX,OAAO,EAAE,EAAE5C,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAM,IAAI,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAG,CAAC,IAAKA,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;IAClF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAA2E,CAAA,EAAW;MAEpB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IAC1C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,YAAY,EAAE,SAAAE,CAASC,YAAY,EAAE;MAEnC,IAAIC,KAAK;QAAEC,GAAG,GAAG,EAAE;MACnB,IAAI9E,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAIM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACjBwE,GAAG,IAAG,GAAG;MACX;MAEA,IAAIxE,CAAC,KAAK,CAAC,EAAE;QACXwE,GAAG,IAAG9E,CAAC;MACT,CAAC,MAAM;QAEL,IAAI4E,YAAY,IAAI,CAACC,KAAK,GAAG7C,IAAI,CAACE,KAAK,CAAClC,CAAC,GAAGM,CAAC,CAAC,IAAI,CAAC,EAAE;UACnDwE,GAAG,IAAGD,KAAK;UACXC,GAAG,IAAG,GAAG;UACT9E,CAAC,IAAGM,CAAC;QACP;QAEAwE,GAAG,IAAG9E,CAAC;QACP8E,GAAG,IAAG,GAAG;QACTA,GAAG,IAAGxE,CAAC;MACT;MACA,OAAOwE,GAAG;IACZ,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAAC,CAASH,YAAY,EAAE;MAEhC,IAAIC,KAAK;QAAEC,GAAG,GAAG,EAAE;MACnB,IAAI9E,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAIM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACjBwE,GAAG,IAAG,GAAG;MACX;MAEA,IAAIxE,CAAC,KAAK,CAAC,EAAE;QACXwE,GAAG,IAAG9E,CAAC;MACT,CAAC,MAAM;QAEL,IAAI4E,YAAY,IAAI,CAACC,KAAK,GAAG7C,IAAI,CAACE,KAAK,CAAClC,CAAC,GAAGM,CAAC,CAAC,IAAI,CAAC,EAAE;UACnDwE,GAAG,IAAGD,KAAK;UACX7E,CAAC,IAAGM,CAAC;QACP;QAEAwE,GAAG,IAAG,SAAS;QACfA,GAAG,IAAG9E,CAAC;QACP8E,GAAG,IAAG,IAAI;QACVA,GAAG,IAAGxE,CAAC;QACPwE,GAAG,IAAG,GAAG;MACX;MACA,OAAOA,GAAG;IACZ,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,aAAa,EAAE,SAAAE,CAAA,EAAW;MAExB,IAAIhC,CAAC;MACL,IAAIrC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAI+B,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAIuC,GAAG,GAAG,EAAE;MAEZ,IAAI/E,KAAK,CAACS,CAAC,CAAC,IAAIT,KAAK,CAACwC,CAAC,CAAC,EAAE;QACxB,OAAOuC,GAAG;MACZ;MAEA,GAAG;QACDA,GAAG,CAACC,IAAI,CAAClD,IAAI,CAACE,KAAK,CAACvB,CAAC,GAAG+B,CAAC,CAAC,CAAC;QAC3BM,CAAC,GAAGrC,CAAC,GAAG+B,CAAC;QACT/B,CAAC,GAAG+B,CAAC;QACLA,CAAC,GAAGM,CAAC;MACP,CAAC,QAAQrC,CAAC,KAAK,CAAC;MAEhB,OAAOsE,GAAG;IACZ,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,UAAU,EAAE,SAAAE,CAASC,GAAG,EAAE;MAExB,IAAIvD,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MACjB,IAAID,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MAEjB,IAAI1B,KAAK,CAAC2B,CAAC,CAAC,IAAI3B,KAAK,CAAC0B,CAAC,CAAC,EAAE;QACxB,OAAO,KAAK;MACd;MAEAwD,GAAG,GAAGA,GAAG,IAAI,EAAE,CAAC,CAAC;;MAEjB,IAAIC,MAAM,GAAGvC,QAAQ,CAACjB,CAAC,EAAED,CAAC,CAAC,CAAC,CAAC;MAC7B,IAAI0D,MAAM,GAAGrC,UAAU,CAACpB,CAAC,EAAED,CAAC,EAAEyD,MAAM,CAAC,CAAC,CAAC;;MAEvC,IAAIP,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE;MAElCA,GAAG,IAAGjD,CAAC,GAAGD,CAAC,GAAG,CAAC;MAEfC,CAAC,IAAGD,CAAC;MACLC,CAAC,IAAG,EAAE;MAEN,IAAIA,CAAC,EACHiD,GAAG,IAAG,GAAG;MAEX,IAAIO,MAAM,EAAE;QAEV,KAAK,IAAIrE,CAAC,GAAGsE,MAAM,EAAEtE,CAAC,EAAE,GAAG;UACzB8D,GAAG,IAAGjD,CAAC,GAAGD,CAAC,GAAG,CAAC;UACfC,CAAC,IAAGD,CAAC;UACLC,CAAC,IAAG,EAAE;QACR;QACAiD,GAAG,IAAG,GAAG;QACT,KAAK,IAAI9D,CAAC,GAAGqE,MAAM,EAAErE,CAAC,EAAE,GAAG;UACzB8D,GAAG,IAAGjD,CAAC,GAAGD,CAAC,GAAG,CAAC;UACfC,CAAC,IAAGD,CAAC;UACLC,CAAC,IAAG,EAAE;QACR;QACAiD,GAAG,IAAG,GAAG;MACX,CAAC,MAAM;QACL,KAAK,IAAI9D,CAAC,GAAGoE,GAAG,EAAEvD,CAAC,IAAIb,CAAC,EAAE,GAAG;UAC3B8D,GAAG,IAAGjD,CAAC,GAAGD,CAAC,GAAG,CAAC;UACfC,CAAC,IAAGD,CAAC;UACLC,CAAC,IAAG,EAAE;QACR;MACF;MACA,OAAOiD,GAAG;IACZ;EACF,CAAC;EAED,IAAI,OAAOS,MAAM,KAAK,UAAU,IAAIA,MAAM,CAAC,KAAK,CAAC,EAAE;IACjDA,MAAM,CAAC,EAAE,EAAE,YAAW;MACpB,OAAOnF,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,OAAOoF,OAAO,KAAK,QAAQ,EAAE;IACtChF,MAAM,CAACiF,cAAc,CAACrF,QAAQ,EAAE,YAAY,EAAE;MAAE,OAAO,EAAE;IAAK,CAAC,CAAC;IAChEA,QAAQ,CAAC,SAAS,CAAC,GAAGA,QAAQ;IAC9BA,QAAQ,CAAC,UAAU,CAAC,GAAGA,QAAQ;IAC/BsF,MAAM,CAAC,SAAS,CAAC,GAAGtF,QAAQ;EAC9B,CAAC,MAAM;IACLR,IAAI,CAAC,UAAU,CAAC,GAAGQ,QAAQ;EAC7B;AAEF,CAAC,EAAE,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}