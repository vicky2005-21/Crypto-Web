{"ast":null,"code":"let Declaration = require('../declaration');\nlet {\n  parseTemplate,\n  warnMissedAreas,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils');\nclass GridTemplate extends Declaration {\n  /**\n   * Translate grid-template to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {\n      return undefined;\n    }\n    let gap = getGridGap(decl);\n\n    /**\n     * we must insert inherited gap values in some cases:\n     * if we are inside media query && if we have no grid-gap value\n     */\n    let inheritedGap = inheritGridGap(decl, gap);\n    let {\n      rows,\n      columns,\n      areas\n    } = parseTemplate({\n      decl,\n      gap: inheritedGap || gap\n    });\n    let hasAreas = Object.keys(areas).length > 0;\n    let hasRows = Boolean(rows);\n    let hasColumns = Boolean(columns);\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    });\n    warnMissedAreas(areas, decl, result);\n    if (hasRows && hasColumns || hasAreas) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: rows,\n        raws: {}\n      });\n    }\n    if (hasColumns) {\n      decl.cloneBefore({\n        prop: '-ms-grid-columns',\n        value: columns,\n        raws: {}\n      });\n    }\n    return decl;\n  }\n}\nGridTemplate.names = ['grid-template'];\nmodule.exports = GridTemplate;","map":{"version":3,"names":["Declaration","require","parseTemplate","warnMissedAreas","getGridGap","warnGridGap","inheritGridGap","GridTemplate","insert","decl","prefix","prefixes","result","parent","some","i","prop","undefined","gap","inheritedGap","rows","columns","areas","hasAreas","Object","keys","length","hasRows","Boolean","hasColumns","cloneBefore","value","raws","names","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/gta-final/node_modules/autoprefixer/lib/hacks/grid-template.js"],"sourcesContent":["let Declaration = require('../declaration')\nlet {\n  parseTemplate,\n  warnMissedAreas,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils')\n\nclass GridTemplate extends Declaration {\n  /**\n   * Translate grid-template to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {\n      return undefined\n    }\n\n    let gap = getGridGap(decl)\n\n    /**\n     * we must insert inherited gap values in some cases:\n     * if we are inside media query && if we have no grid-gap value\n     */\n    let inheritedGap = inheritGridGap(decl, gap)\n\n    let { rows, columns, areas } = parseTemplate({\n      decl,\n      gap: inheritedGap || gap\n    })\n\n    let hasAreas = Object.keys(areas).length > 0\n    let hasRows = Boolean(rows)\n    let hasColumns = Boolean(columns)\n\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    })\n\n    warnMissedAreas(areas, decl, result)\n\n    if ((hasRows && hasColumns) || hasAreas) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: rows,\n        raws: {}\n      })\n    }\n\n    if (hasColumns) {\n      decl.cloneBefore({\n        prop: '-ms-grid-columns',\n        value: columns,\n        raws: {}\n      })\n    }\n\n    return decl\n  }\n}\n\nGridTemplate.names = ['grid-template']\n\nmodule.exports = GridTemplate\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAI;EACFC,aAAa;EACbC,eAAe;EACfC,UAAU;EACVC,WAAW;EACXC;AACF,CAAC,GAAGL,OAAO,CAAC,cAAc,CAAC;AAE3B,MAAMM,YAAY,SAASP,WAAW,CAAC;EACrC;AACF;AACA;EACEQ,MAAMA,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACrC,IAAIF,MAAM,KAAK,MAAM,EAAE,OAAO,KAAK,CAACF,MAAM,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IAElE,IAAIF,IAAI,CAACI,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,eAAe,CAAC,EAAE;MACrD,OAAOC,SAAS;IAClB;IAEA,IAAIC,GAAG,GAAGd,UAAU,CAACK,IAAI,CAAC;;IAE1B;AACJ;AACA;AACA;IACI,IAAIU,YAAY,GAAGb,cAAc,CAACG,IAAI,EAAES,GAAG,CAAC;IAE5C,IAAI;MAAEE,IAAI;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAGpB,aAAa,CAAC;MAC3CO,IAAI;MACJS,GAAG,EAAEC,YAAY,IAAID;IACvB,CAAC,CAAC;IAEF,IAAIK,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,MAAM,GAAG,CAAC;IAC5C,IAAIC,OAAO,GAAGC,OAAO,CAACR,IAAI,CAAC;IAC3B,IAAIS,UAAU,GAAGD,OAAO,CAACP,OAAO,CAAC;IAEjChB,WAAW,CAAC;MACVa,GAAG;MACHW,UAAU;MACVpB,IAAI;MACJG;IACF,CAAC,CAAC;IAEFT,eAAe,CAACmB,KAAK,EAAEb,IAAI,EAAEG,MAAM,CAAC;IAEpC,IAAKe,OAAO,IAAIE,UAAU,IAAKN,QAAQ,EAAE;MACvCd,IAAI,CAACqB,WAAW,CAAC;QACfd,IAAI,EAAE,eAAe;QACrBe,KAAK,EAAEX,IAAI;QACXY,IAAI,EAAE,CAAC;MACT,CAAC,CAAC;IACJ;IAEA,IAAIH,UAAU,EAAE;MACdpB,IAAI,CAACqB,WAAW,CAAC;QACfd,IAAI,EAAE,kBAAkB;QACxBe,KAAK,EAAEV,OAAO;QACdW,IAAI,EAAE,CAAC;MACT,CAAC,CAAC;IACJ;IAEA,OAAOvB,IAAI;EACb;AACF;AAEAF,YAAY,CAAC0B,KAAK,GAAG,CAAC,eAAe,CAAC;AAEtCC,MAAM,CAACC,OAAO,GAAG5B,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}