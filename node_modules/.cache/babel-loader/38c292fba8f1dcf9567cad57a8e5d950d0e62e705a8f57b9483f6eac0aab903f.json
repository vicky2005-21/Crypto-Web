{"ast":null,"code":"let flexSpec = require('./flex-spec');\nlet Declaration = require('../declaration');\nclass Order extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec;\n    [spec, prefix] = flexSpec(prefix);\n    if (spec === 2009) {\n      return prefix + 'box-ordinal-group';\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-order';\n    }\n    return super.prefixed(prop, prefix);\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'order';\n  }\n\n  /**\n   * Fix value for 2009 spec\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0];\n    if (spec === 2009 && /\\d/.test(decl.value)) {\n      decl.value = (parseInt(decl.value) + 1).toString();\n      return super.set(decl, prefix);\n    }\n    return super.set(decl, prefix);\n  }\n}\nOrder.names = ['order', 'flex-order', 'box-ordinal-group'];\nmodule.exports = Order;","map":{"version":3,"names":["flexSpec","require","Declaration","Order","prefixed","prop","prefix","spec","normalize","set","decl","test","value","parseInt","toString","names","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/autoprefixer/lib/hacks/order.js"],"sourcesContent":["let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass Order extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-ordinal-group'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-order'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'order'\n  }\n\n  /**\n   * Fix value for 2009 spec\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009 && /\\d/.test(decl.value)) {\n      decl.value = (parseInt(decl.value) + 1).toString()\n      return super.set(decl, prefix)\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nOrder.names = ['order', 'flex-order', 'box-ordinal-group']\n\nmodule.exports = Order\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;AACrC,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE3C,MAAME,KAAK,SAASD,WAAW,CAAC;EAC9B;AACF;AACA;EACEE,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACrB,IAAIC,IAAI;IACP,CAACA,IAAI,EAAED,MAAM,CAAC,GAAGN,QAAQ,CAACM,MAAM,CAAC;IAClC,IAAIC,IAAI,KAAK,IAAI,EAAE;MACjB,OAAOD,MAAM,GAAG,mBAAmB;IACrC;IACA,IAAIC,IAAI,KAAK,IAAI,EAAE;MACjB,OAAOD,MAAM,GAAG,YAAY;IAC9B;IACA,OAAO,KAAK,CAACF,QAAQ,CAACC,IAAI,EAAEC,MAAM,CAAC;EACrC;;EAEA;AACF;AACA;EACEE,SAASA,CAAA,EAAG;IACV,OAAO,OAAO;EAChB;;EAEA;AACF;AACA;EACEC,GAAGA,CAACC,IAAI,EAAEJ,MAAM,EAAE;IAChB,IAAIC,IAAI,GAAGP,QAAQ,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAIC,IAAI,KAAK,IAAI,IAAI,IAAI,CAACI,IAAI,CAACD,IAAI,CAACE,KAAK,CAAC,EAAE;MAC1CF,IAAI,CAACE,KAAK,GAAG,CAACC,QAAQ,CAACH,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,EAAEE,QAAQ,CAAC,CAAC;MAClD,OAAO,KAAK,CAACL,GAAG,CAACC,IAAI,EAAEJ,MAAM,CAAC;IAChC;IACA,OAAO,KAAK,CAACG,GAAG,CAACC,IAAI,EAAEJ,MAAM,CAAC;EAChC;AACF;AAEAH,KAAK,CAACY,KAAK,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,mBAAmB,CAAC;AAE1DC,MAAM,CAACC,OAAO,GAAGd,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}