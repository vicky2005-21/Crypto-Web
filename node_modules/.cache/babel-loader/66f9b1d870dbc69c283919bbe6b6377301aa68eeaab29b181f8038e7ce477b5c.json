{"ast":null,"code":"let parser = require('postcss-value-parser');\nlet range = require('normalize-range');\nlet OldValue = require('../old-value');\nlet Value = require('../value');\nlet utils = require('../utils');\nlet IS_DIRECTION = /top|left|right|bottom/gi;\nclass Gradient extends Value {\n  /**\n   * Change degrees for webkit prefix\n   */\n  replace(string, prefix) {\n    let ast = parser(string);\n    for (let node of ast.nodes) {\n      let gradientName = this.name; // gradient name\n      if (node.type === 'function' && node.value === gradientName) {\n        node.nodes = this.newDirection(node.nodes);\n        node.nodes = this.normalize(node.nodes, gradientName);\n        if (prefix === '-webkit- old') {\n          let changes = this.oldWebkit(node);\n          if (!changes) {\n            return false;\n          }\n        } else {\n          node.nodes = this.convertDirection(node.nodes);\n          node.value = prefix + node.value;\n        }\n      }\n    }\n    return ast.toString();\n  }\n\n  /**\n   * Replace first token\n   */\n  replaceFirst(params) {\n    for (var _len = arguments.length, words = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      words[_key - 1] = arguments[_key];\n    }\n    let prefix = words.map(i => {\n      if (i === ' ') {\n        return {\n          type: 'space',\n          value: i\n        };\n      }\n      return {\n        type: 'word',\n        value: i\n      };\n    });\n    return prefix.concat(params.slice(1));\n  }\n\n  /**\n   * Convert angle unit to deg\n   */\n  normalizeUnit(str, full) {\n    let num = parseFloat(str);\n    let deg = num / full * 360;\n    return `${deg}deg`;\n  }\n\n  /**\n   * Normalize angle\n   */\n  normalize(nodes, gradientName) {\n    if (!nodes[0]) return nodes;\n    if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 400);\n    } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);\n    } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 1);\n    } else if (nodes[0].value.includes('deg')) {\n      let num = parseFloat(nodes[0].value);\n      num = range.wrap(0, 360, num);\n      nodes[0].value = `${num}deg`;\n    }\n    if (gradientName === 'linear-gradient' || gradientName === 'repeating-linear-gradient') {\n      let direction = nodes[0].value;\n\n      // Unitless zero for `<angle>` values are allowed in CSS gradients and transforms.\n      // Spec: https://github.com/w3c/csswg-drafts/commit/602789171429b2231223ab1e5acf8f7f11652eb3\n      if (direction === '0deg' || direction === '0') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'top');\n      } else if (direction === '90deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'right');\n      } else if (direction === '180deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom'); // default value\n      } else if (direction === '270deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'left');\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   * Replace old direction to new\n   */\n  newDirection(params) {\n    if (params[0].value === 'to') {\n      return params;\n    }\n    IS_DIRECTION.lastIndex = 0; // reset search index of global regexp\n    if (!IS_DIRECTION.test(params[0].value)) {\n      return params;\n    }\n    params.unshift({\n      type: 'word',\n      value: 'to'\n    }, {\n      type: 'space',\n      value: ' '\n    });\n    for (let i = 2; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        break;\n      }\n      if (params[i].type === 'word') {\n        params[i].value = this.revertDirection(params[i].value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Look for at word\n   */\n  isRadial(params) {\n    let state = 'before';\n    for (let param of params) {\n      if (state === 'before' && param.type === 'space') {\n        state = 'at';\n      } else if (state === 'at' && param.value === 'at') {\n        state = 'after';\n      } else if (state === 'after' && param.type === 'space') {\n        return true;\n      } else if (param.type === 'div') {\n        break;\n      } else {\n        state = 'before';\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Change new direction to old\n   */\n  convertDirection(params) {\n    if (params.length > 0) {\n      if (params[0].value === 'to') {\n        this.fixDirection(params);\n      } else if (params[0].value.includes('deg')) {\n        this.fixAngle(params);\n      } else if (this.isRadial(params)) {\n        this.fixRadial(params);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Replace `to top left` to `bottom right`\n   */\n  fixDirection(params) {\n    params.splice(0, 2);\n    for (let param of params) {\n      if (param.type === 'div') {\n        break;\n      }\n      if (param.type === 'word') {\n        param.value = this.revertDirection(param.value);\n      }\n    }\n  }\n\n  /**\n   * Add 90 degrees\n   */\n  fixAngle(params) {\n    let first = params[0].value;\n    first = parseFloat(first);\n    first = Math.abs(450 - first) % 360;\n    first = this.roundFloat(first, 3);\n    params[0].value = `${first}deg`;\n  }\n\n  /**\n   * Fix radial direction syntax\n   */\n  fixRadial(params) {\n    let first = [];\n    let second = [];\n    let a, b, c, i, next;\n    for (i = 0; i < params.length - 2; i++) {\n      a = params[i];\n      b = params[i + 1];\n      c = params[i + 2];\n      if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n        next = i + 3;\n        break;\n      } else {\n        first.push(a);\n      }\n    }\n    let div;\n    for (i = next; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        div = params[i];\n        break;\n      } else {\n        second.push(params[i]);\n      }\n    }\n    params.splice(0, i, ...second, div, ...first);\n  }\n  revertDirection(word) {\n    return Gradient.directions[word.toLowerCase()] || word;\n  }\n\n  /**\n   * Round float and save digits under dot\n   */\n  roundFloat(float, digits) {\n    return parseFloat(float.toFixed(digits));\n  }\n\n  /**\n   * Convert to old webkit syntax\n   */\n  oldWebkit(node) {\n    let {\n      nodes\n    } = node;\n    let string = parser.stringify(node.nodes);\n    if (this.name !== 'linear-gradient') {\n      return false;\n    }\n    if (nodes[0] && nodes[0].value.includes('deg')) {\n      return false;\n    }\n    if (string.includes('px') || string.includes('-corner') || string.includes('-side')) {\n      return false;\n    }\n    let params = [[]];\n    for (let i of nodes) {\n      params[params.length - 1].push(i);\n      if (i.type === 'div' && i.value === ',') {\n        params.push([]);\n      }\n    }\n    this.oldDirection(params);\n    this.colorStops(params);\n    node.nodes = [];\n    for (let param of params) {\n      node.nodes = node.nodes.concat(param);\n    }\n    node.nodes.unshift({\n      type: 'word',\n      value: 'linear'\n    }, this.cloneDiv(node.nodes));\n    node.value = '-webkit-gradient';\n    return true;\n  }\n\n  /**\n   * Change direction syntax to old webkit\n   */\n  oldDirection(params) {\n    let div = this.cloneDiv(params[0]);\n    if (params[0][0].value !== 'to') {\n      return params.unshift([{\n        type: 'word',\n        value: Gradient.oldDirections.bottom\n      }, div]);\n    } else {\n      let words = [];\n      for (let node of params[0].slice(2)) {\n        if (node.type === 'word') {\n          words.push(node.value.toLowerCase());\n        }\n      }\n      words = words.join(' ');\n      let old = Gradient.oldDirections[words] || words;\n      params[0] = [{\n        type: 'word',\n        value: old\n      }, div];\n      return params[0];\n    }\n  }\n\n  /**\n   * Get div token from exists parameters\n   */\n  cloneDiv(params) {\n    for (let i of params) {\n      if (i.type === 'div' && i.value === ',') {\n        return i;\n      }\n    }\n    return {\n      type: 'div',\n      value: ',',\n      after: ' '\n    };\n  }\n\n  /**\n   * Change colors syntax to old webkit\n   */\n  colorStops(params) {\n    let result = [];\n    for (let i = 0; i < params.length; i++) {\n      let pos;\n      let param = params[i];\n      let item;\n      if (i === 0) {\n        continue;\n      }\n      let color = parser.stringify(param[0]);\n      if (param[1] && param[1].type === 'word') {\n        pos = param[1].value;\n      } else if (param[2] && param[2].type === 'word') {\n        pos = param[2].value;\n      }\n      let stop;\n      if (i === 1 && (!pos || pos === '0%')) {\n        stop = `from(${color})`;\n      } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n        stop = `to(${color})`;\n      } else if (pos) {\n        stop = `color-stop(${pos}, ${color})`;\n      } else {\n        stop = `color-stop(${color})`;\n      }\n      let div = param[param.length - 1];\n      params[i] = [{\n        type: 'word',\n        value: stop\n      }];\n      if (div.type === 'div' && div.value === ',') {\n        item = params[i].push(div);\n      }\n      result.push(item);\n    }\n    return result;\n  }\n\n  /**\n   * Remove old WebKit gradient too\n   */\n  old(prefix) {\n    if (prefix === '-webkit-') {\n      let type;\n      if (this.name === 'linear-gradient') {\n        type = 'linear';\n      } else if (this.name === 'repeating-linear-gradient') {\n        type = 'repeating-linear';\n      } else if (this.name === 'repeating-radial-gradient') {\n        type = 'repeating-radial';\n      } else {\n        type = 'radial';\n      }\n      let string = '-gradient';\n      let regexp = utils.regexp(`-webkit-(${type}-gradient|gradient\\\\(\\\\s*${type})`, false);\n      return new OldValue(this.name, prefix + this.name, string, regexp);\n    } else {\n      return super.old(prefix);\n    }\n  }\n\n  /**\n   * Do not add non-webkit prefixes for list-style and object\n   */\n  add(decl, prefix) {\n    let p = decl.prop;\n    if (p.includes('mask')) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix);\n      }\n    } else if (p === 'list-style' || p === 'list-style-image' || p === 'content') {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix);\n      }\n    } else {\n      return super.add(decl, prefix);\n    }\n    return undefined;\n  }\n}\nGradient.names = ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'];\nGradient.directions = {\n  top: 'bottom',\n  // default value\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n};\n\n// Direction to replace\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n};\nmodule.exports = Gradient;","map":{"version":3,"names":["parser","require","range","OldValue","Value","utils","IS_DIRECTION","Gradient","replace","string","prefix","ast","node","nodes","gradientName","name","type","value","newDirection","normalize","changes","oldWebkit","convertDirection","toString","replaceFirst","params","_len","arguments","length","words","Array","_key","map","i","concat","slice","normalizeUnit","str","full","num","parseFloat","deg","test","Math","PI","includes","wrap","direction","lastIndex","unshift","revertDirection","isRadial","state","param","fixDirection","fixAngle","fixRadial","splice","first","abs","roundFloat","second","a","b","c","next","push","div","word","directions","toLowerCase","float","digits","toFixed","stringify","oldDirection","colorStops","cloneDiv","oldDirections","bottom","join","old","after","result","pos","item","color","stop","regexp","add","decl","p","prop","undefined","names","top","left","right","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/autoprefixer/lib/hacks/gradient.js"],"sourcesContent":["let parser = require('postcss-value-parser')\nlet range = require('normalize-range')\n\nlet OldValue = require('../old-value')\nlet Value = require('../value')\nlet utils = require('../utils')\n\nlet IS_DIRECTION = /top|left|right|bottom/gi\n\nclass Gradient extends Value {\n  /**\n   * Change degrees for webkit prefix\n   */\n  replace(string, prefix) {\n    let ast = parser(string)\n    for (let node of ast.nodes) {\n      let gradientName = this.name // gradient name\n      if (node.type === 'function' && node.value === gradientName) {\n        node.nodes = this.newDirection(node.nodes)\n        node.nodes = this.normalize(node.nodes, gradientName)\n        if (prefix === '-webkit- old') {\n          let changes = this.oldWebkit(node)\n          if (!changes) {\n            return false\n          }\n        } else {\n          node.nodes = this.convertDirection(node.nodes)\n          node.value = prefix + node.value\n        }\n      }\n    }\n    return ast.toString()\n  }\n\n  /**\n   * Replace first token\n   */\n  replaceFirst(params, ...words) {\n    let prefix = words.map(i => {\n      if (i === ' ') {\n        return { type: 'space', value: i }\n      }\n      return { type: 'word', value: i }\n    })\n    return prefix.concat(params.slice(1))\n  }\n\n  /**\n   * Convert angle unit to deg\n   */\n  normalizeUnit(str, full) {\n    let num = parseFloat(str)\n    let deg = (num / full) * 360\n    return `${deg}deg`\n  }\n\n  /**\n   * Normalize angle\n   */\n  normalize(nodes, gradientName) {\n    if (!nodes[0]) return nodes\n\n    if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 400)\n    } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI)\n    } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 1)\n    } else if (nodes[0].value.includes('deg')) {\n      let num = parseFloat(nodes[0].value)\n      num = range.wrap(0, 360, num)\n      nodes[0].value = `${num}deg`\n    }\n\n    if (\n      gradientName === 'linear-gradient' ||\n      gradientName === 'repeating-linear-gradient'\n    ) {\n      let direction = nodes[0].value\n\n      // Unitless zero for `<angle>` values are allowed in CSS gradients and transforms.\n      // Spec: https://github.com/w3c/csswg-drafts/commit/602789171429b2231223ab1e5acf8f7f11652eb3\n      if (direction === '0deg' || direction === '0') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'top')\n      } else if (direction === '90deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'right')\n      } else if (direction === '180deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom') // default value\n      } else if (direction === '270deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'left')\n      }\n    }\n\n    return nodes\n  }\n\n  /**\n   * Replace old direction to new\n   */\n  newDirection(params) {\n    if (params[0].value === 'to') {\n      return params\n    }\n    IS_DIRECTION.lastIndex = 0 // reset search index of global regexp\n    if (!IS_DIRECTION.test(params[0].value)) {\n      return params\n    }\n\n    params.unshift(\n      {\n        type: 'word',\n        value: 'to'\n      },\n      {\n        type: 'space',\n        value: ' '\n      }\n    )\n\n    for (let i = 2; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        break\n      }\n      if (params[i].type === 'word') {\n        params[i].value = this.revertDirection(params[i].value)\n      }\n    }\n\n    return params\n  }\n\n  /**\n   * Look for at word\n   */\n  isRadial(params) {\n    let state = 'before'\n    for (let param of params) {\n      if (state === 'before' && param.type === 'space') {\n        state = 'at'\n      } else if (state === 'at' && param.value === 'at') {\n        state = 'after'\n      } else if (state === 'after' && param.type === 'space') {\n        return true\n      } else if (param.type === 'div') {\n        break\n      } else {\n        state = 'before'\n      }\n    }\n    return false\n  }\n\n  /**\n   * Change new direction to old\n   */\n  convertDirection(params) {\n    if (params.length > 0) {\n      if (params[0].value === 'to') {\n        this.fixDirection(params)\n      } else if (params[0].value.includes('deg')) {\n        this.fixAngle(params)\n      } else if (this.isRadial(params)) {\n        this.fixRadial(params)\n      }\n    }\n    return params\n  }\n\n  /**\n   * Replace `to top left` to `bottom right`\n   */\n  fixDirection(params) {\n    params.splice(0, 2)\n\n    for (let param of params) {\n      if (param.type === 'div') {\n        break\n      }\n      if (param.type === 'word') {\n        param.value = this.revertDirection(param.value)\n      }\n    }\n  }\n\n  /**\n   * Add 90 degrees\n   */\n  fixAngle(params) {\n    let first = params[0].value\n    first = parseFloat(first)\n    first = Math.abs(450 - first) % 360\n    first = this.roundFloat(first, 3)\n    params[0].value = `${first}deg`\n  }\n\n  /**\n   * Fix radial direction syntax\n   */\n  fixRadial(params) {\n    let first = []\n    let second = []\n    let a, b, c, i, next\n\n    for (i = 0; i < params.length - 2; i++) {\n      a = params[i]\n      b = params[i + 1]\n      c = params[i + 2]\n      if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n        next = i + 3\n        break\n      } else {\n        first.push(a)\n      }\n    }\n\n    let div\n    for (i = next; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        div = params[i]\n        break\n      } else {\n        second.push(params[i])\n      }\n    }\n\n    params.splice(0, i, ...second, div, ...first)\n  }\n\n  revertDirection(word) {\n    return Gradient.directions[word.toLowerCase()] || word\n  }\n\n  /**\n   * Round float and save digits under dot\n   */\n  roundFloat(float, digits) {\n    return parseFloat(float.toFixed(digits))\n  }\n\n  /**\n   * Convert to old webkit syntax\n   */\n  oldWebkit(node) {\n    let { nodes } = node\n    let string = parser.stringify(node.nodes)\n\n    if (this.name !== 'linear-gradient') {\n      return false\n    }\n    if (nodes[0] && nodes[0].value.includes('deg')) {\n      return false\n    }\n    if (\n      string.includes('px') ||\n      string.includes('-corner') ||\n      string.includes('-side')\n    ) {\n      return false\n    }\n\n    let params = [[]]\n    for (let i of nodes) {\n      params[params.length - 1].push(i)\n      if (i.type === 'div' && i.value === ',') {\n        params.push([])\n      }\n    }\n\n    this.oldDirection(params)\n    this.colorStops(params)\n\n    node.nodes = []\n    for (let param of params) {\n      node.nodes = node.nodes.concat(param)\n    }\n\n    node.nodes.unshift(\n      { type: 'word', value: 'linear' },\n      this.cloneDiv(node.nodes)\n    )\n    node.value = '-webkit-gradient'\n\n    return true\n  }\n\n  /**\n   * Change direction syntax to old webkit\n   */\n  oldDirection(params) {\n    let div = this.cloneDiv(params[0])\n\n    if (params[0][0].value !== 'to') {\n      return params.unshift([\n        { type: 'word', value: Gradient.oldDirections.bottom },\n        div\n      ])\n    } else {\n      let words = []\n      for (let node of params[0].slice(2)) {\n        if (node.type === 'word') {\n          words.push(node.value.toLowerCase())\n        }\n      }\n\n      words = words.join(' ')\n      let old = Gradient.oldDirections[words] || words\n\n      params[0] = [{ type: 'word', value: old }, div]\n      return params[0]\n    }\n  }\n\n  /**\n   * Get div token from exists parameters\n   */\n  cloneDiv(params) {\n    for (let i of params) {\n      if (i.type === 'div' && i.value === ',') {\n        return i\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  /**\n   * Change colors syntax to old webkit\n   */\n  colorStops(params) {\n    let result = []\n    for (let i = 0; i < params.length; i++) {\n      let pos\n      let param = params[i]\n      let item\n      if (i === 0) {\n        continue\n      }\n\n      let color = parser.stringify(param[0])\n      if (param[1] && param[1].type === 'word') {\n        pos = param[1].value\n      } else if (param[2] && param[2].type === 'word') {\n        pos = param[2].value\n      }\n\n      let stop\n      if (i === 1 && (!pos || pos === '0%')) {\n        stop = `from(${color})`\n      } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n        stop = `to(${color})`\n      } else if (pos) {\n        stop = `color-stop(${pos}, ${color})`\n      } else {\n        stop = `color-stop(${color})`\n      }\n\n      let div = param[param.length - 1]\n      params[i] = [{ type: 'word', value: stop }]\n      if (div.type === 'div' && div.value === ',') {\n        item = params[i].push(div)\n      }\n      result.push(item)\n    }\n    return result\n  }\n\n  /**\n   * Remove old WebKit gradient too\n   */\n  old(prefix) {\n    if (prefix === '-webkit-') {\n      let type\n      if (this.name === 'linear-gradient') {\n        type = 'linear'\n      } else if (this.name === 'repeating-linear-gradient') {\n        type = 'repeating-linear'\n      } else if (this.name === 'repeating-radial-gradient') {\n        type = 'repeating-radial'\n      } else {\n        type = 'radial'\n      }\n      let string = '-gradient'\n      let regexp = utils.regexp(\n        `-webkit-(${type}-gradient|gradient\\\\(\\\\s*${type})`,\n        false\n      )\n\n      return new OldValue(this.name, prefix + this.name, string, regexp)\n    } else {\n      return super.old(prefix)\n    }\n  }\n\n  /**\n   * Do not add non-webkit prefixes for list-style and object\n   */\n  add(decl, prefix) {\n    let p = decl.prop\n    if (p.includes('mask')) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else if (\n      p === 'list-style' ||\n      p === 'list-style-image' ||\n      p === 'content'\n    ) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else {\n      return super.add(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nGradient.names = [\n  'linear-gradient',\n  'repeating-linear-gradient',\n  'radial-gradient',\n  'repeating-radial-gradient'\n]\n\nGradient.directions = {\n  top: 'bottom', // default value\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n}\n\n// Direction to replace\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n}\n\nmodule.exports = Gradient\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}