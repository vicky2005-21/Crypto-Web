{"ast":null,"code":"function last(array) {\n  return array[array.length - 1];\n}\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = [''];\n    let stack = [current];\n    for (let sym of str) {\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n      current[current.length - 1] += sym;\n    }\n    return stack[0];\n  },\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = '';\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`;\n        continue;\n      }\n      result += i;\n    }\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"names":["last","array","length","brackets","parse","str","current","stack","sym","push","pop","stringify","ast","result","i","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/autoprefixer/lib/brackets.js"],"sourcesContent":["function last(array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n"],"mappings":"AAAA,SAASA,IAAIA,CAACC,KAAK,EAAE;EACnB,OAAOA,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;AAChC;AAEA,IAAIC,QAAQ,GAAG;EACb;AACF;AACA;EACEC,KAAKA,CAACC,GAAG,EAAE;IACT,IAAIC,OAAO,GAAG,CAAC,EAAE,CAAC;IAClB,IAAIC,KAAK,GAAG,CAACD,OAAO,CAAC;IAErB,KAAK,IAAIE,GAAG,IAAIH,GAAG,EAAE;MACnB,IAAIG,GAAG,KAAK,GAAG,EAAE;QACfF,OAAO,GAAG,CAAC,EAAE,CAAC;QACdN,IAAI,CAACO,KAAK,CAAC,CAACE,IAAI,CAACH,OAAO,CAAC;QACzBC,KAAK,CAACE,IAAI,CAACH,OAAO,CAAC;QACnB;MACF;MAEA,IAAIE,GAAG,KAAK,GAAG,EAAE;QACfD,KAAK,CAACG,GAAG,CAAC,CAAC;QACXJ,OAAO,GAAGN,IAAI,CAACO,KAAK,CAAC;QACrBD,OAAO,CAACG,IAAI,CAAC,EAAE,CAAC;QAChB;MACF;MAEAH,OAAO,CAACA,OAAO,CAACJ,MAAM,GAAG,CAAC,CAAC,IAAIM,GAAG;IACpC;IAEA,OAAOD,KAAK,CAAC,CAAC,CAAC;EACjB,CAAC;EAED;AACF;AACA;EACEI,SAASA,CAACC,GAAG,EAAE;IACb,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,IAAIF,GAAG,EAAE;MACjB,IAAI,OAAOE,CAAC,KAAK,QAAQ,EAAE;QACzBD,MAAM,IAAK,IAAGV,QAAQ,CAACQ,SAAS,CAACG,CAAC,CAAE,GAAE;QACtC;MACF;MAEAD,MAAM,IAAIC,CAAC;IACb;IACA,OAAOD,MAAM;EACf;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGb,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}