{"ast":null,"code":"let Declaration = require('../declaration');\nclass WritingMode extends Declaration {\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      let cloned = this.set(this.clone(decl), prefix);\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n      let direction = 'ltr';\n      decl.parent.nodes.forEach(i => {\n        if (i.prop === 'direction') {\n          if (i.value === 'rtl' || i.value === 'ltr') direction = i.value;\n        }\n      });\n      cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;\n      return decl.parent.insertBefore(decl, cloned);\n    }\n    return super.insert(decl, prefix, prefixes);\n  }\n}\nWritingMode.names = ['writing-mode'];\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n};\nmodule.exports = WritingMode;","map":{"version":3,"names":["Declaration","require","WritingMode","insert","decl","prefix","prefixes","cloned","set","clone","needCascade","raws","before","calcBefore","direction","parent","nodes","forEach","i","prop","value","msValues","insertBefore","names","ltr","rtl","module","exports"],"sources":["/Users/vigneshchowdary/Desktop/untitled folder 5/CryptoBucks-Final-Code/node_modules/autoprefixer/lib/hacks/writing-mode.js"],"sourcesContent":["let Declaration = require('../declaration')\n\nclass WritingMode extends Declaration {\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      let cloned = this.set(this.clone(decl), prefix)\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n      let direction = 'ltr'\n\n      decl.parent.nodes.forEach(i => {\n        if (i.prop === 'direction') {\n          if (i.value === 'rtl' || i.value === 'ltr') direction = i.value\n        }\n      })\n\n      cloned.value = WritingMode.msValues[direction][decl.value] || decl.value\n      return decl.parent.insertBefore(decl, cloned)\n    }\n\n    return super.insert(decl, prefix, prefixes)\n  }\n}\n\nWritingMode.names = ['writing-mode']\n\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n}\n\nmodule.exports = WritingMode\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE3C,MAAMC,WAAW,SAASF,WAAW,CAAC;EACpCG,MAAMA,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IAC7B,IAAID,MAAM,KAAK,MAAM,EAAE;MACrB,IAAIE,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,EAAEC,MAAM,CAAC;MAE/C,IAAI,IAAI,CAACK,WAAW,CAACN,IAAI,CAAC,EAAE;QAC1BG,MAAM,CAACI,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,UAAU,CAACP,QAAQ,EAAEF,IAAI,EAAEC,MAAM,CAAC;MAC9D;MACA,IAAIS,SAAS,GAAG,KAAK;MAErBV,IAAI,CAACW,MAAM,CAACC,KAAK,CAACC,OAAO,CAACC,CAAC,IAAI;QAC7B,IAAIA,CAAC,CAACC,IAAI,KAAK,WAAW,EAAE;UAC1B,IAAID,CAAC,CAACE,KAAK,KAAK,KAAK,IAAIF,CAAC,CAACE,KAAK,KAAK,KAAK,EAAEN,SAAS,GAAGI,CAAC,CAACE,KAAK;QACjE;MACF,CAAC,CAAC;MAEFb,MAAM,CAACa,KAAK,GAAGlB,WAAW,CAACmB,QAAQ,CAACP,SAAS,CAAC,CAACV,IAAI,CAACgB,KAAK,CAAC,IAAIhB,IAAI,CAACgB,KAAK;MACxE,OAAOhB,IAAI,CAACW,MAAM,CAACO,YAAY,CAAClB,IAAI,EAAEG,MAAM,CAAC;IAC/C;IAEA,OAAO,KAAK,CAACJ,MAAM,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,CAAC;EAC7C;AACF;AAEAJ,WAAW,CAACqB,KAAK,GAAG,CAAC,cAAc,CAAC;AAEpCrB,WAAW,CAACmB,QAAQ,GAAG;EACrBG,GAAG,EAAE;IACH,eAAe,EAAE,OAAO;IACxB,aAAa,EAAE,OAAO;IACtB,aAAa,EAAE;EACjB,CAAC;EACDC,GAAG,EAAE;IACH,eAAe,EAAE,OAAO;IACxB,aAAa,EAAE,OAAO;IACtB,aAAa,EAAE;EACjB;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGzB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}